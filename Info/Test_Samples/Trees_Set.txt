#include <iostream>
#include "Structure/B_Tree.hpp"
#include "Structure/AVL_Tree.hpp"
#include "Structure/B_Plus_Tree.hpp"
#include "Structure/Leftist_Tree.hpp"

#pragma clang diagnostic push
#pragma ide diagnostic ignored "UnusedValue"
int main() {
    B_Tree<int, int, 5> _tree {};
    _tree.insert(3, 3);
    _tree.insert(8, 8);
    _tree.insert(31, -7);
    _tree.insert(11, 11);
    _tree.insert(23, 23);
    _tree.insert(29, 29);
    _tree.insert(50, 23);
    _tree.insert(28, 2);
    _tree.insert(50, 50);
    _tree.insert(53, 53);
    _tree.erase(29);
    _tree.erase(53);
    _tree.erase(31);
    [[maybe_unused]] auto a = _tree.search(28);

    B_Plus_Tree<int, int, 5> _tree2{};
    _tree2.insert(1, 3);
    _tree2.insert(3, 2);
    _tree2.insert(4, 3);
    _tree2.insert(2, 7);
    _tree2.insert(5,0);
    _tree2.insert(9, -1);
    auto t = (B_Plus_Tree<int, int, 5>::Index_Node*)_tree2.Root;
    for (int i = 11; i!=25; ++i)
    {
        _tree2.insert(i, i+6);
    }
    t = (B_Plus_Tree<int, int, 5>::Index_Node*)_tree2.Root;
    for (int q = -11; q!= -27; --q)
    {
        _tree2.insert(q, q -3);
    }

    t = (B_Plus_Tree<int, int, 5>::Index_Node*)_tree2.Root;
    [[maybe_unused]]auto search1 = _tree2.search(-21);
    [[maybe_unused]]auto node = ((B_Plus_Tree<int, int, 5>::Data_Node*)((B_Plus_Tree<int, int, 5>::Index_Node*)t->Paths[0])->Paths[0]);
    [[maybe_unused]] auto search_2 =_tree2.search(-22);

    auto Leftist1 = make_LT({40, 10, 20, 30, 5}, true);
    auto Leftist2 = make_LT(std::vector<int>{18, 6, 7}, true);
    Leftist1.merge(Leftist2);
    Leftist1.pop();
    Leftist1.pop();

    Leftist_Tree<int> tree3{};
    for(auto i = 0; i!= 100; ++i) tree3.insert(i);
    for(auto i = 0; i!= 100; ++i) tree3.pop();

    AVL_Tree<int, int> _tree3 {};
    for(int i=0;i!=2000;++i) _tree3.insert(i, i+5);

    decltype(auto) ts = make_tensor_s<int, 3, 2, 4>();
    ts[{0, 0, 1}] = 2;
    ts[{0, 0, 2}] = 3;

    std::cout << "Debug Hook" << std::endl;
}