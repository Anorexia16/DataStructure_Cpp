#include "Structure/binary_tree.hpp"
#include <iostream>

int main() {
    binary_tree<std::string> tree {};
    binary_node<std::string> head {"/"};
    binary_node<std::string> child11 {"+"};
    binary_node<std::string> child12 {"*"};
    binary_node<std::string> child21 {"-"};
    binary_node<std::string> child23 {"+"};
    binary_node<std::string> child22 {"+"};
    binary_node<std::string> child24 {"*"};
    binary_node<std::string> child31 {""};
    binary_node<std::string> child32 {"a"};
    binary_node<std::string> child33 {"x"};
    binary_node<std::string> child34 {"y"};
    binary_node<std::string> child35 {""};
    binary_node<std::string> child36 {"b"};
    binary_node<std::string> child37 {"c"};
    binary_node<std::string> child38 {"a"};

    tree.bind_top(head);
    tree.to_inner();

    tree.top().link_d(child11);
    tree.top().link_d(child12);
    child31.link_u(child21);
    child32.link_u(child21);
    child33.link_u(child22);
    child34.link_u(child22);
    child35.link_u(child23);
    child36.link_u(child23);
    child37.link_u(child24);
    child38.link_u(child24);

    child21.link_u(tree.top().left());
    child22.link_u(tree.top().left());
    child23.link_u(tree.top().right());
    tree.top().right().link_d(child24);


    auto Cache1 = tree.top().left().left().path();
    for (auto Cache2 = std::begin(tree) ; Cache2 != std::back(tree); ++Cache2) {
        if (*Cache2 != "") std::cout << *Cache2 << " ";
    }
    auto Cache3 = tree.find("c");

    std::cout << std::endl;
    std::cout << std::boolalpha << tree.complete() << std::endl;
    std::cout << std::boolalpha << tree.full() << std::endl;
    std::cout << std::boolalpha << tree.degree() << std::endl;
    std::cout << std::boolalpha << tree.depth() << std::endl;
    std::cout << "Debug Hook" << std::endl;
}